@document.meta
tangle: ./init.lua
@end

* Leader
  @code lua
  -- Set <space> as the leader key
  vim.g.mapleader = ' '
  vim.g.maplocalleader = ' '
  @end
* Lazy
** Install
   @code lua
   -- Install package manager
   local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
   if not vim.loop.fs_stat(lazypath) then
     vim.fn.system {
       'git',
       'clone',
       '--filter=blob:none',
       'https://github.com/folke/lazy.nvim.git',
       '--branch=stable', -- latest stable release
       lazypath,
     }
   end
   vim.opt.rtp:prepend(lazypath)
   @end
** Packages
   @code lua
   require('lazy').setup({
     -- Git related plugins
     {
       "NeogitOrg/neogit",
       dependencies = {
         "nvim-lua/plenary.nvim",         -- required
         "nvim-telescope/telescope.nvim", -- optional
         "sindrets/diffview.nvim",        -- optional
         "ibhagwan/fzf-lua",              -- optional
       },
       config = true
     },

     -- Detect tabstop and shiftwidth automatically
     'tpope/vim-sleuth',

     -- NOTE: This is where your plugins related to LSP can be installed.
     --  The configuration is done below. Search for lspconfig to find it below.
     {
       -- LSP Configuration & Plugins
       'neovim/nvim-lspconfig',
       dependencies = {
         -- Automatically install LSPs to stdpath for neovim
         { 'williamboman/mason.nvim', config = true },
         'williamboman/mason-lspconfig.nvim',

         -- Useful status updates for LSP
         -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
         { 'j-hui/fidget.nvim', opts = {} },

         -- Additional lua configuration, makes nvim stuff amazing!
         'folke/neodev.nvim',
       },
     },

     {
       -- Autocompletion
       'hrsh7th/nvim-cmp',
       dependencies = {
         -- Snippet Engine & its associated nvim-cmp source
         'L3MON4D3/LuaSnip',
         'saadparwaiz1/cmp_luasnip',

         -- Adds LSP completion capabilities
         'hrsh7th/cmp-nvim-lsp',
         'hrsh7th/cmp-path',
         'hrsh7th/cmp-buffer',
         'hrsh7th/cmp-cmdline',

         -- Adds a number of user-friendly snippets
         'rafamadriz/friendly-snippets',
       },
     },

     -- Useful plugin to show you pending keybinds.
     { 'folke/which-key.nvim', opts = {} },
     {
       -- Adds git related signs to the gutter, as well as utilities for managing changes
       'lewis6991/gitsigns.nvim',
       opts = {
         -- See `:help gitsigns.txt`
         signs = {
           add = { text = '+' },
           change = { text = '~' },
           delete = { text = '_' },
           topdelete = { text = 'â€¾' },
           changedelete = { text = '~' },
         },
         on_attach = function(bufnr)
           local gs = package.loaded.gitsigns

           local function map(mode, l, r, opts)
             opts = opts or {}
             opts.buffer = bufnr
             vim.keymap.set(mode, l, r, opts)
           end

           -- Navigation
           map({ 'n', 'v' }, ']c', function()
             if vim.wo.diff then
               return ']c'
             end
             vim.schedule(function()
               gs.next_hunk()
             end)
             return '<Ignore>'
           end, { expr = true, desc = 'Jump to next hunk' })

           map({ 'n', 'v' }, '[c', function()
             if vim.wo.diff then
               return '[c'
             end
             vim.schedule(function()
               gs.prev_hunk()
             end)
             return '<Ignore>'
           end, { expr = true, desc = 'Jump to previous hunk' })

           -- Actions
           -- visual mode
           map('v', '<leader>hs', function()
             gs.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
           end, { desc = 'stage git hunk' })
           map('v', '<leader>hr', function()
             gs.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
           end, { desc = 'reset git hunk' })
           -- normal mode
           map('n', '<leader>hs', gs.stage_hunk, { desc = 'git stage hunk' })
           map('n', '<leader>hr', gs.reset_hunk, { desc = 'git reset hunk' })
           map('n', '<leader>hS', gs.stage_buffer, { desc = 'git Stage buffer' })
           map('n', '<leader>hu', gs.undo_stage_hunk, { desc = 'undo stage hunk' })
           map('n', '<leader>hR', gs.reset_buffer, { desc = 'git Reset buffer' })
           map('n', '<leader>hp', gs.preview_hunk, { desc = 'preview git hunk' })
           map('n', '<leader>hb', function()
             gs.blame_line { full = false }
           end, { desc = 'git blame line' })
           map('n', '<leader>hd', gs.diffthis, { desc = 'git diff against index' })
           map('n', '<leader>hD', function()
             gs.diffthis '~'
           end, { desc = 'git diff against last commit' })

           -- Toggles
           map('n', '<leader>tb', gs.toggle_current_line_blame, { desc = 'toggle git blame line' })
           map('n', '<leader>td', gs.toggle_deleted, { desc = 'toggle git show deleted' })

           -- Text object
           map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'select git hunk' })
         end,
       },
     },

     { "catppuccin/nvim",      name = "catppuccin", priority = 1000 },

     {
       -- Set lualine as statusline
       'nvim-lualine/lualine.nvim',
       -- See `:help lualine.txt`
       opts = {
         options = {
           icons_enabled = false,
           theme = 'catppuccin',
           component_separators = '|',
           section_separators = '',
         },
       },
     },

     {
       -- Add indentation guides even on blank lines
       'lukas-reineke/indent-blankline.nvim',
       -- Enable `lukas-reineke/indent-blankline.nvim`
       -- See `:help indent_blankline.txt`
       main = "ibl",
       opts = {},
     },

     -- "gc" to comment visual regions/lines
     { 'numToStr/Comment.nvim',  opts = {} },

     -- Fuzzy Finder (files, lsp, etc)
     {
       'nvim-telescope/telescope.nvim',
       branch = '0.1.x',
       dependencies = {
         'nvim-lua/plenary.nvim',
         -- Fuzzy Finder Algorithm which requires local dependencies to be built.
         -- Only load if `make` is available. Make sure you have the system
         -- requirements installed.
         {
           'nvim-telescope/telescope-fzf-native.nvim',
           -- NOTE: If you are having trouble with this installation,
           --       refer to the README for telescope-fzf-native for more instructions.
           build = 'make',
           cond = function()
             return vim.fn.executable 'make' == 1
           end,
         },
       },
     },

     {
       -- Highlight, edit, and navigate code
       'nvim-treesitter/nvim-treesitter',
       dependencies = {
         'nvim-treesitter/nvim-treesitter-textobjects',
       },
       build = ':TSUpdate',
     },

     {
       "folke/noice.nvim",
       event = "VeryLazy",
       opts = {
         -- add any options here
       },
       dependencies = {
         -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
         "MunifTanjim/nui.nvim",
         -- OPTIONAL:
         --   `nvim-notify` is only needed, if you want to use the notification view.
         --   If not available, we use `mini` as the fallback
         "rcarriga/nvim-notify",
       }
     },

     { import = 'custom.plugins' },
   }, {})
   @end
* Theme
  @code lua
  -- Set the Theme
  vim.cmd.colorscheme "catppuccin-mocha"
  @end

* Yank
  @code lua
  -- [[ Highlight on yank ]]
  -- See `:help vim.highlight.on_yank()`
  local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
  vim.api.nvim_create_autocmd('TextYankPost', {
    callback = function()
      vim.highlight.on_yank()
    end,
    group = highlight_group,
    pattern = '*',
  })
  @end

* Telescope
  @code lua
  -- [[ Configure Telescope ]]
  -- See `:help telescope` and `:help telescope.setup()`
  local actions = require "telescope.actions"
  require('telescope').setup {
    defaults = {
      mappings = {
        i = {
          ['<C-u>'] = false,
          ['<C-d>'] = false,
          ['<Esc>'] = actions.close,
        },
      },
    },
  }

  -- Enable telescope fzf native, if installed
  pcall(require('telescope').load_extension, 'fzf')
  @end

* Treesitter
  @code lua
  -- [[ Configure Treesitter ]]
  -- See `:help nvim-treesitter`
  require('nvim-treesitter.configs').setup {
    -- Add languages to be installed here that you want installed for treesitter
    ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'tsx', 'javascript', 'typescript', 'vimdoc', 'vim',
      'elixir', 'heex' },

    -- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
    auto_install = true,

    highlight = { enable = true },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = '<c-space>',
        node_incremental = '<c-space>',
        scope_incremental = '<c-s>',
        node_decremental = '<M-space>',
      },
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['aa'] = '@parameter.outer',
          ['ia'] = '@parameter.inner',
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
      swap = {
        enable = true,
        swap_next = {
          ['<leader>a'] = '@parameter.inner',
        },
        swap_previous = {
          ['<leader>A'] = '@parameter.inner',
        },
      },
    },
  }
  @end

* Lsp
** Lsp Keymaps
   @code lua
   -- [[ Configure LSP ]]
   --  This function gets run when an LSP connects to a particular buffer.
   local on_attach = function(_, bufnr)
     -- NOTE: Remember that lua is a real programming language, and as such it is possible
     -- to define small helper and utility functions so you don't have to repeat yourself
     -- many times.
     --
     -- In this case, we create a function that lets us more easily define mappings specific
     -- for LSP related items. It sets the mode, buffer and description for us each time.
     local nmap = function(keys, func, desc)
       if desc then
         desc = 'LSP: ' .. desc
       end

       vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
     end

     nmap('<leader>cr', vim.lsp.buf.rename, '[Code] [R]ename')
     nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

     nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
     nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
     nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
     nmap('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
     nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
     nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

     -- See `:help K` for why this keymap
     nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
     nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

     -- Lesser used LSP functionality
     nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')

     -- code lens 
     if client.resolved_capabilities.code_lens then
       local codelens = vim.api.nvim_create_augroup(
         'LSPCodeLens',
         { clear = true }
       )
       vim.api.nvim_create_autocmd({ 'BufEnter', 'InsertLeave', 'CursorHold' }, {
         group = codelens,
         callback = function()
           vim.lsp.codelens.refresh()
         end,
         buffer = bufnr,
       })
     end

     -- Create a command `:Format` local to the LSP buffer
     vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
       vim.lsp.buf.format()
     end, { desc = 'Format current buffer with LSP' })
   end
   @end

** Lsp Language servers
*** Mason setup
    @code lua 
    require('mason').setup()
    require('mason-lspconfig').setup()
    @end
*** Servers
    @code lua
    -- Enable the following language servers
    --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
    --
    --  Add any additional override configuration in the following tables. They will be passed to
    --  the `settings` field of the server config. You must look up that documentation yourself.
    --
    --  If you want to override the default filetypes that your language server will attach to you can
    --  define the property 'filetypes' to the map in question.
    local servers = {
      -- clangd = {},
      -- gopls = {},
      -- pyright = {},
      -- tsserver = {},
      ocamllsp = {
        cmd = { "ocamllsp" },
        filetypes = { "ocaml", "ocaml.menhir", "ocaml.interface", "ocaml.ocamllex", "reason", "dune" },
        -- on_attach = on_attach,
        -- root_dir = lsp.util.root_pattern("*.opam", "esy.json", "package.json", ".git", "dune-project", "dune-workspace"),
        capabilities = capabilities
      },
      ansiblels = {
        filetypes = {
          "yaml.ansible",
          "yaml",
        }
      },
      hls = {},
      html = { filetypes = { 'html', 'twig', 'hbs', 'heex', "elixir" } },
      tailwindcss = {
        init_options = { elixir = "phoenix-heex", eruby = "erb", heex = "phoenix=heex", svelte = "html" },
        handlers = {
          ["tailwindcss/getConfiguration"] = function(_, _, params, _, bufnr, _)
            vim.lsp.buf_notify(bufnr, "tailwindcss/getConfigurationResponse", { _id = params._id })
          end,
        },
        settings = {
          includeLanguages = {
            typescript = "javascript",
            typescriptreact = "javascript",
            ["html-eex"] = "html",
            ["phoenix-heex"] = "html",
            heex = "html",
            eelixir = "html",
            elm = "html",
            erb = "html",
            svelte = "html",
          },
          tailwindCSS = {
            lint = {
              cssConflict = "warning",
              invalidApply = "error",
              invalidConfigPath = "error",
              invalidScreen = "error",
              invalidTailwindDirective = "error",
              invalidVariant = "error",
              recommendedVariantOrder = "warning",
            },
            experimental = {
              classRegex = {
                [[class= "([^"]*)]],
                [[class: "([^"]*)]],
                '~H""".*class="([^"]*)".*"""',
              },
            },
            validate = true,
          },
        },
        filetypes = {
          "css",
          "scss",
          "sass",
          "html",
          "heex",
          "elixir",
          "eruby",
          "javascript",
          "javascriptreact",
          "typescript",
          "typescriptreact",
          "svelte",
        },
      },

      lua_ls = {
        Lua = {
          workspace = { checkThirdParty = false },
          telemetry = { enable = false },
        },
      },
    }
    @end

*** Lua configuration setup
    @code lua
    -- Setup neovim lua configuration
    require('neodev').setup()
    @end

*** Rust tools
    {:after/ftplugin/rust.lua:}[rust.lua]
** Cmp
   @code lua
   -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
   local capabilities = vim.lsp.protocol.make_client_capabilities()
   capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)
   @end

* Keymaps
  This contains the helper classes used for building and setting up keymaps.
  Currently this contains the helper class that helps setting the description of keymaps made using the commander {https://github.com/FeiyouG/commander.nvim#commanderaddcommanderitem-commanderaddopts}[format].
** Helper
   @code lua
   -- Function to check if an array contains an object with a certain key pair if the array is non-empty
   local function containsObjectWithKey(arr, key)
     if arr == nil then
       return false
     end
     for _, obj in ipairs(arr) do
       if obj[key] ~= nil then
         return true
       end
     end
     return false
   end

   -- Set description of object defined for commander using the commander objects
   local function setDescription (item)
     if item.keys == nil then
       return
     end
     if containsObjectWithKey(item.keys[3], "noremap") and containsObjectWithKey(item.keys[3], "silent") then
       vim.keymap.set(item.keys[1], item.keys[2], item.cmd, {desc = item.desc, noremap = item.keys[3].noremap, silent = item.keys[3].silent})
     elseif containsObjectWithKey(item.keys[3], "noremap") then
       vim.keymap.set(item.keys[1], item.keys[2], item.cmd, {desc = item.desc, noremap = item.keys[3].noremap})
     elseif containsObjectWithKey(item.keys[3], "silent") then
       vim.keymap.set(item.keys[1], item.keys[2], item.cmd, {desc = item.desc, silent = item.keys[3].silent})
     else
       vim.keymap.set(item.keys[1], item.keys[2], item.cmd, {desc = item.desc})
     end
   end

   -- Implementation of concatenating 2 lists since lua does not have a proper implementation of concatenation.
   local function conList(l1, l2)
     local combinedList = {}
     for _, v in ipairs(l1) do
       table.insert(combinedList, v)
     end
     for _, v in ipairs(l2) do
       table.insert(combinedList, v)
     end
     return combinedList
   end
   @end
** Basic
   @code lua
   -- See `:help vim.keymap.set()`
   vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

   -- Remap for dealing with word wrap
   vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
   vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
   @end
** Telescope
   @code lua
   -- See `:help telescope.builtin`
   local telescopeKeymap = {
     {
       desc = '[?] Find recently opened files',
       cmd = require('telescope.builtin').oldfiles,
       keys = {'n','<leader>?' } },
     {
       keys = {'n', '<leader><space>'},
       cmd = require('telescope.builtin').buffers,
       desc = '[ ] Find existing buffers' },
     {
       keys = {'n', '<leader>/'},
       cmd = function()
       -- You can pass additional configuration to telescope to change theme, layout, etc.
       require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
         winblend = 10,
         previewer = false,
       })
       end,
       desc = '[/] Fuzzily search in current buffer' },

     { keys = {'n', '<leader>gf'}, cmd = require('telescope.builtin').git_files, desc = 'Search [G]it [F]iles' },
     { keys = {'n', '<leader>sf'}, cmd = require('telescope.builtin').find_files, desc = '[S]earch [F]iles' },
     { keys = {'n', '<leader>sh'}, cmd = require('telescope.builtin').help_tags, desc = '[S]earch [H]elp' },
     { keys = {'n', '<leader>sw'}, cmd = require('telescope.builtin').grep_string, desc = '[S]earch current [W]ord' },
     { keys = {'n', '<leader>sg'}, cmd = require('telescope.builtin').live_grep, desc = '[S]earch by [G]rep' },
     { keys = {'n', '<leader>sd'}, cmd = require('telescope.builtin').diagnostics, desc = '[S]earch [D]iagnostics' },
     { keys = {'n', '<leader>sr'}, cmd = require('telescope.builtin').resume, desc = '[S]earch [R]esume' },
     { keys = {'n', '<leader>sc'}, cmd = "<CMD>Noice telescope<CR>", desc = '[S]earch [C]ommands' },
   }
   @end
** Floating Terminal
   @code lua
   local floatingTerminalKeymap = {
     { keys = {'n', "t"}, cmd = ":FloatermToggle myfloat<CR>"},
     { keys = {'t', "<Esc>"}, cmd = "<C-\\><C-n>:q<CR>"},
   }
   @end
** File manager
   @code lua
   local fileManagerKeymap = {
     { keys = {'n', "<leader>f"}, cmd = "<cmd>Neotree<CR>", desc = "File tree"}
   }
   @end
** Diagnostics
   @code lua
   local diagnosticKeymap = {
     { keys = {'n', '[d'}, cmd = vim.diagnostic.goto_prev, desc = 'Go to previous diagnostic message' },
     { keys = {'n', ']d'}, cmd = vim.diagnostic.goto_next, desc = 'Go to next diagnostic message' },
     { keys = {'n', '<leader>e'}, cmd = vim.diagnostic.open_float, desc = 'Open floating diagnostic message' },
     { keys = {'n', '<leader>q'}, cmd = vim.diagnostic.setloclist, desc = 'Open diagnostics list' },
   }
   @end
** Git
  @code lua
  local gitKeymap = {
    { keys = {"n", "<leader>gg"}, cmd = require('neogit').open, desc = "Open neogit"},
  }
   @end
** Mason
   @code lua
   local masonKeymap = {
    { keys = {"n", "<leader>m"}, cmd = "<cmd>Mason<CR>", desc = "Open Mason"},
   }
   @end
** Which key legenda
   @code lua
   require('which-key').register({
     ['<leader>c'] = { name = '[C]ode', _ = 'which_key_ignore' },
     ['<leader>d'] = { name = '[D]ocument', _ = 'which_key_ignore' },
     ['<leader>g'] = { name = '[G]it', _ = 'which_key_ignore' },
     ['<leader>h'] = { name = 'Git [H]unk', _ = 'which_key_ignore' },
     ['<leader>s'] = { name = '[S]earch', _ = 'which_key_ignore' },
     ['<leader>f'] = { name = '[F]iles', _ = 'which_key_ignore' },
     ['<leader>n'] = { name = '[N]eorg', _ = 'which_key_ignore' },
   })

   -- register which-key VISUAL mode
   -- required for visual <leader>hs (hunk stage) to work
   require('which-key').register({
     ['<leader>'] = { name = 'VISUAL <leader>' },
     ['<leader>h'] = { 'Git [H]unk' },
   }, { mode = 'v' })
   @end
** Neorg
   @code lua
   local neorgKeymap = { 
     {
       desc = "Run neorg toc",
       cmd = "<CMD>Neorg toc<CR>",
     }, {
       desc = "Run tangle on current file",
       cmd = "<CMD>Neorg tangle current-file<CR>",
     }
   }
   @end
** Commander
   @code lua
   vim.keymap.set("i", "<C-p>", "<CMD>Telescope commander<CR>", { desc = "[S]earch [C]ommands"})
   vim.keymap.set("n", "<C-p>", "<CMD>Telescope commander<CR>", { desc = "[S]earch [C]ommands"})

   local commander = require("commander")

   -- Combine all keymaps into one big list
   local commanderKeymapList = conList(conList(conList(conList(conList(conList(telescopeKeymap, neorgKeymap), gitKeymap), floatingTerminalKeymap), fileManagerKeymap), diagnosticKeymap), masonKeymap)

   -- Add it to commander
   commander.add(commanderKeymapList)

   -- This will convert all added commands to commander to also be descriptive for which-key
   for _, obj in ipairs(commanderKeymapList) do
     setDescription(obj)
   end
   @end
* Options
  @code lua
  -- See `:help vim.o`
  -- Set highlight on search
  -- vim.o.hlsearch = false

  -- Make line numbers default
  vim.wo.number = true

  -- Set relativenumber on
  vim.wo.relativenumber = true

  -- Enable mouse mode
  vim.o.mouse = 'a'

  -- Sync clipboard between OS and Neovim.
  --  Remove this option if you want your OS clipboard to remain independent.
  --  See `:help 'clipboard'`
  vim.o.clipboard = 'unnamedplus'

  -- Enable break indent
  vim.o.breakindent = true

  -- Save undo history
  vim.o.undofile = true

  -- Case-insensitive searching UNLESS \C or capital in search
  vim.o.ignorecase = true
  vim.o.smartcase = true

  -- Keep signcolumn on by default
  vim.wo.signcolumn = 'yes'

  -- Decrease update time
  vim.o.updatetime = 250
  vim.o.timeoutlen = 300

  -- Set completeopt to have a better completion experience
  vim.o.completeopt = 'menuone,noselect'

  -- NOTE: You should make sure your terminal supports this
  vim.o.termguicolors = true
  @end
* Mason
   @code lua
   -- Ensure the servers above are installed
   local mason_lspconfig = require 'mason-lspconfig'

   mason_lspconfig.setup {
     ensure_installed = vim.tbl_keys(servers),
   }

   mason_lspconfig.setup_handlers {
     function(server_name)
       require('lspconfig')[server_name].setup {
         capabilities = capabilities,
         on_attach = on_attach,
         settings = servers[server_name],
         filetypes = (servers[server_name] or {}).filetypes,
       }
     end,
   }
   @end


* Neovim completion
  @code lua
  -- [[ Configure nvim-cmp ]]
  -- See `:help cmp`
  local cmp = require 'cmp'
  local luasnip = require 'luasnip'
  require('luasnip.loaders.from_vscode').lazy_load()
  luasnip.config.setup {}

  -- `/` cmdline setup.
  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- `:` cmdline setup.
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
        {
          name = 'cmdline',
          option = {
            ignore_cmds = { 'Man', '!' }
          }
        }
      })
  })
  cmp.setup {
    snippet = {
      expand = function(args)
        luasnip.lsp_expand(args.body)
      end,
    },
    mapping = cmp.mapping.preset.insert {
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete {},
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
      ['<Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif luasnip.expand_or_locally_jumpable() then
          luasnip.expand_or_jump()
        else
          fallback()
        end
      end, { 'i', 's' }),
      ['<S-Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.locally_jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { 'i', 's' }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'luasnip' },
      { name = 'buffer' },
      { name = 'path' },
      { name = 'neorg' },
    },
  }

  -- The line beneath this is called `modeline`. See `:help modeline`
  -- vim: ts=2 sts=2 sw=2 et
  @end
* Noice
  @code lua
  require("noice").setup({
    lsp = {
      -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
      override = {
        ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
        ["vim.lsp.util.stylize_markdown"] = true,
        ["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
      },
    },
    -- you can enable a preset for easier configuration
    presets = {
      bottom_search = true, -- use a classic bottom cmdline for search
      command_palette = true, -- position the cmdline and popupmenu together
      long_message_to_split = true, -- long messages will be sent to a split
      inc_rename = false, -- enables an input dialog for inc-rename.nvim
      lsp_doc_border = false, -- add a border to hover docs and signature help
    },
  })
  @end
